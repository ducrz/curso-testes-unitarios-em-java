Seção 6: PowerMock

PowerMock

Existem operações que o mocki não consegue trabalhar, por exemplo, mokar o construtor de um objeto, alterar o comportamento de um método estático ou privado.

Caso seja necessário realizar alguma destas atividades, é necessário utilizar uma ferramenta mais poderosa: PowerMock.

PowerMock é um framework que extende as funcionalidades de outros frameworks de mock.

Possui integração com EasyMock e com Mockito.


pom.xml>

  <dependency>
  <groupId>org.powermock</groupId>
  <artifactId>powermock-api-mockito</artifactId>
  <version>1.6.6</version>  
  </dependency>
  <dependency>
  <groupId>org.powermock</groupId>
  <artifactId>powermock-module-junit4</artifactId>
  <version>1.6.6</version>  
  </dependency>

Mockando Construtores

Agora será possível controlar o tempo.

@RunWith(PowerMockRunner.class)
@PrepareForTest({LocacaoService.class, DataUtils.class})


PowerMockito.whenNew(Date.class).withNoArguments().thenReturn(DataUtils.obterData(28, 4, 2017));



Mockando métodos estáticos

Obter a data atual através do Calendar.


Mockando métodos privados

Refatorando o que é necessário.

Spy do PowerMock

service = PowerMockito.spy(service);

Testando métodos privados diretamente

Utilizando PowerMock é possível invocar um método privado diretamente.

Whitebox.invokeMethod(service, "calcularValorLocacao", filmes);


The dark side of PowerMock

Anotações nas classes são muito pesadas.

A cobertura acada ficando comprometida.



Refatorações para substituir o PowerMock


